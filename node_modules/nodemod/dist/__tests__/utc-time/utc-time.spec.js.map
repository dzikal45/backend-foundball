{"version":3,"file":"utc-time.spec.js","sourceRoot":"","sources":["../../../src/__tests__/utc-time/utc-time.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { utcTime } from '../../utc-time/index.js';\n\nconst msReplacer = (expected: Date, datetime: Date) => {\n  const msFromExpected = expected.toJSON().replace(/^.+T\\d{2}:\\d{2}:\\d{2}\\.(\\d+)Z/i, '$1');\n\n  return new Date(\n    datetime\n      .toJSON()\n      .replace(\n        /^(.+T\\d{2}:\\d{2}:\\d{2})\\.\\d+Z/i,\n        (_, s) => {\n          return `${s}.${msFromExpected}Z`;\n        }\n      )\n  );\n};\n\ntest(`utcTime works w/o any params`, async () => {\n  const d = await utcTime();\n\n  expect(d instanceof Date).toBe(true);\n  expect(d.toJSON()).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/i);\n});\n\ntest(`'startDatetime' is null`, async () => {\n  const d = await utcTime({ startDatetime: null as never });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d.toJSON()).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/i);\n});\n\ntest(`'offset' is null`, async () => {\n  const d = await utcTime({ offset: null as never });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d.toJSON()).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/i);\n});\n\ntest(`'offset' is empty object`, async () => {\n  const d = await utcTime({\n    offset: {},\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d.toJSON()).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/i);\n});\n\ntest(`'startDatetime' is specified`, async () => {\n  const datetime = '2018-03-03T03:03:03.030Z';\n  const d = await utcTime({\n    startDatetime: datetime,\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(new Date(datetime));\n});\n\ntest(`'startDatetime' is specified with offset`, async () => {\n  const datetime = '2018-03-03T03:03:03.030Z';\n  const d = await utcTime({\n    startDatetime: datetime,\n    offset: {\n      hour: 3,\n      minute: -3,\n      second: 3,\n      millisecond: -3,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(new Date('2018-03-03T06:00:06.027Z'));\n});\n\ntest(`'offset.hour' is positive`, async () => {\n  const now = new Date();\n  const hour = 3;\n  const d = await utcTime({\n    offset: {\n      hour,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours() + hour,\n      now.getUTCMinutes(),\n      now.getUTCSeconds()\n    )))\n  );\n});\n\ntest(`'offset.hour' is negative`, async () => {\n  const now = new Date();\n  const hour = -13;\n  const d = await utcTime({\n    offset: {\n      hour,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours() + hour,\n      now.getUTCMinutes(),\n      now.getUTCSeconds()\n    )))\n  );\n});\n\ntest(`'offset.minute' is positive`, async () => {\n  const now = new Date();\n  const minute = 3;\n  const d = await utcTime({\n    offset: {\n      minute,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes() + minute,\n      now.getUTCSeconds()\n    )))\n  );\n});\n\ntest(`'offset.minute' is negative`, async () => {\n  const now = new Date();\n  const minute = -13;\n  const d = await utcTime({\n    offset: {\n      minute,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes() + minute,\n      now.getUTCSeconds()\n    )))\n  );\n});\n\ntest(`'offset.second' is positive`, async () => {\n  const now = new Date();\n  const second = 3;\n  const d = await utcTime({\n    offset: {\n      second,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes(),\n      now.getUTCSeconds() + second\n    )))\n  );\n});\n\ntest(`'offset.second' is negative`, async () => {\n  const now = new Date();\n  const second = -13;\n  const d = await utcTime({\n    offset: {\n      second,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes(),\n      now.getUTCSeconds() + second\n    )))\n  );\n});\n\ntest(`'offset.millisecond' is positive`, async () => {\n  const now = new Date();\n  const millisecond = 3;\n  const d = await utcTime({\n    offset: {\n      millisecond,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes(),\n      now.getUTCSeconds(),\n      now.getUTCMilliseconds() + millisecond\n    )))\n  );\n});\n\ntest(`'offset.millisecond' is negative`, async () => {\n  const now = new Date();\n  const millisecond = -13;\n  const d = await utcTime({\n    offset: {\n      millisecond,\n    },\n  });\n\n  expect(d instanceof Date).toBe(true);\n  expect(d).toEqual(\n    msReplacer(d, new Date(Date.UTC(\n      now.getUTCFullYear(),\n      now.getUTCMonth(),\n      now.getUTCDate(),\n      now.getUTCHours(),\n      now.getUTCMinutes(),\n      now.getUTCSeconds(),\n      now.getUTCMilliseconds() + millisecond\n    )))\n  );\n});\n"]}