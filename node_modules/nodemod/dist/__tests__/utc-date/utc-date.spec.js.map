{"version":3,"file":"utc-date.spec.js","sourceRoot":"","sources":["../../../src/__tests__/utc-date/utc-date.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAElD,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;IACnD,MAAM,CAAC,GAAG,MAAM,OAAO,EAAE,CAAC;IAE1B,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;IACzD,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;IAErD,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;IACtD,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACzB,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAC3B,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAC5E,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAE3D,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;IACtE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEpF,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC","sourcesContent":["import { utcDate } from '../../utc-date/index.js';\n\nit('returns UTC date with any arguments', async () => {\n  const d = await utcDate();\n\n  expect(d).toStrictEqual(new Date(new Date().toJSON().replace(/^(.+)T.+/i, '$1')));\n});\n\nit(`returns UTC date with defined 'startDate'`, async () => {\n  const d = await utcDate({ startDate: '2018-03-03' });\n\n  expect(d).toStrictEqual(new Date(new Date('2018-03-03').toJSON()));\n});\n\nit(`returns UTC date with defined 'offset'`, async () => {\n  const dated = new Date();\n  const exp = new Date(Date.UTC(\n    dated.getUTCFullYear() + 1, dated.getUTCMonth() + 2, dated.getUTCDate()));\n  const d = await utcDate({ offset: { year: 1, month: 2 } });\n\n  expect(d).toStrictEqual(exp);\n});\n\nit(`returns UTC date with defined 'startDate' and 'offset'`, async () => {\n  const d = await utcDate({ startDate: '2018-03-03', offset: { year: 1, month: 2 } });\n\n  expect(d).toStrictEqual(new Date(new Date('2019-05-03').toJSON()));\n});\n"]}