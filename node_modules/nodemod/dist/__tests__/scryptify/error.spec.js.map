{"version":3,"file":"error.spec.js","sourceRoot":"","sources":["../../../src/__tests__/scryptify/error.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzC,IAAI,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;IACnC,IAAI;QACF,MAAM,OAAO,CAAC,IAAa,EAAE,IAAa,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,SAAS,CAAC,qDAAqD,CAAC,CAAC,CAAC;KAC/F;AACH,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACrC,IAAI;QACF,MAAM,OAAO,CAAC,OAAO,EAAE,IAAa,CAAC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,SAAS,CAAC,uDAAuD,CAAC,CAAC,CAAC;KACjG;AACH,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;IAChC,IAAI;QACF,MAAM,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC3B;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;KAC1E;AACH,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;IAC9C,IAAI;QACF,MAAM,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAChC;IAAC,OAAO,CAAC,EAAE;QAEV,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,qEAAqE,CAAC,CAAC,CAAC;KAChH;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { encrypt } from '../../scryptify/index.js';\nimport { rawData } from './CONSTANTS.js';\n\ntest(`'text' not string`, async () => {\n  try {\n    await encrypt(null as never, null as never);\n  } catch (e) {\n    expect(e).toStrictEqual(new TypeError(`Expected 'text' to be a string, but received 'null'`));\n  }\n});\n\ntest(`'secret' not string`, async () => {\n  try {\n    await encrypt(rawData, null as never);\n  } catch (e) {\n    expect(e).toStrictEqual(new TypeError(`Expected 'secret' to be a string, but received 'null'`));\n  }\n});\n\ntest(`invalid 'text'`, async () => {\n  try {\n    await encrypt('', 'haha');\n  } catch (e) {\n    expect(e).toStrictEqual(new Error(`'text' must not be an empty string`));\n  }\n});\n\ntest('a 256 bytes salt is required', async () => {\n  try {\n    await encrypt(rawData, 'haha');\n  } catch (e) {\n    // tslint:disable-next-line: max-line-length\n    expect(e).toStrictEqual(new RangeError(`Invalid length of 'secret'. Must be 256 bytes or 32 characters long`));\n  }\n});\n"]}