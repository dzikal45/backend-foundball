{"version":3,"file":"decrypt.spec.js","sourceRoot":"","sources":["../../../src/__tests__/scryptify/decrypt.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAEjD,IAAI,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;IAClC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACjD,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAEnD,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;IACzF,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,MAAM,GAAG,GAAG,GAAG,CAAC;IAChB,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,IAAI,EAAE;QACrD,YAAY,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAEhC,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE;QAC5B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;KAC1C;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { decrypt, encrypt } from '../../scryptify/index.js';\nimport { rawData, secret } from './CONSTANTS.js';\n\ntest('decryption works', async () => {\n  const encrypted = await encrypt(rawData, secret);\n  const decrypted = await decrypt(encrypted, secret);\n\n  expect(decrypted).toStrictEqual(rawData);\n});\n\ntest('decryption always works on unique encrypted sets from the same raw data', async () => {\n  const encryptedSet = new Set<string>();\n  const len = 1e4;\n  const encryptTasks = Array.from(Array(len), async () => {\n    encryptedSet.add(await encrypt(rawData, secret));\n  });\n\n  await Promise.all(encryptTasks);\n\n  for (const n of encryptedSet) {\n    const decrypted = await decrypt(n, secret);\n    expect(decrypted).toStrictEqual(rawData);\n  }\n});\n"]}