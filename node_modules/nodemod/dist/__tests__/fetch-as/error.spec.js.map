{"version":3,"file":"error.spec.js","sourceRoot":"","sources":["../../../src/__tests__/fetch-as/error.spec.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAGtD,SAAS,CAAC,GAAG,EAAE;IACb,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;IACvC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,WAAW,CAAC,cAAc,CAAC,CAAC;IAE5D,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC","sourcesContent":["import fetch from 'node-fetch';\n\nimport { fetchAsJson } from '../../fetch-as/index.js';\n// import { url } from './CONSTANTS.js';\n\nbeforeAll(() => {\n  Object.assign(global, { fetch });\n});\n\nit('throws when invalid URL', async () => {\n  const { status, error } = await fetchAsJson('/invalid-url');\n\n  expect(status).toStrictEqual(-1);\n  expect(error).toStrictEqual(new TypeError('Only absolute URLs are supported'));\n});\n\n// it('throws when socket timed out', async () => {\n//   try {\n//     await fetchAsJson(`${url}/timeout`, { timeout: 3e3 });\n//   } catch (e) {\n//     expect(e.type).toStrictEqual('request-timeout');\n//     expect(e.message).toStrictEqual(`network timeout at: ${url}/timeout`);\n//     expect(e.name).toStrictEqual('FetchError');\n//   }\n// }, 10e3);\n"]}