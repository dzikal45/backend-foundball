{"version":3,"file":"fetch-as.spec.js","sourceRoot":"","sources":["../../../src/__tests__/fetch-as/fetch-as.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import nock from 'nock';\nimport fetch from 'node-fetch';\nimport { Buffer } from 'safe-buffer';\n\nimport { fetchAsArrayBuffer, fetchAsBlob, fetchAsJson, fetchAsText } from '../../fetch-as/index.js';\nimport { errorData, successData, url } from './CONSTANTS.js';\nimport type { TestErrorData, TestSuccessData } from './test_typings.js';\n\nfunction errorNock(uri: string, data: TestErrorData) {\n  return nock(uri)\n    .persist(true)\n    .get(n => /^\\/error/i.test(n))\n    .reply(404, () => {\n      return { ...data };\n    });\n}\n\nfunction successNock(uri: string, data: TestSuccessData) {\n  return nock(uri)\n    .persist(true)\n    .get(n => /^\\/ok/i.test(n))\n    .reply(200, () => {\n      return { ...data };\n    });\n}\n\n// function timeoutNock(url: string) {\n//   return nock(url)\n//     .persist(true)\n//     // .log(console.log)\n//     .get(uri => /^\\/timeout/i.test(uri))\n//     .delay(5e3)\n//     .reply(500, () => {\n//       return {};\n//     });\n// }\n\nlet nocks: (nock.Scope)[];\n\nbeforeAll(() => {\n  Object.assign(global, { fetch });\n  nocks = [\n    errorNock(url, errorData),\n    // timeoutNock(url),\n\n    successNock(url, successData),\n  ];\n});\n\ndescribe('fetch-as::success', () => {\n  it(`returns response with 'fetchAsArrayBuffer'`, async () => {\n    const d = await fetchAsArrayBuffer<ArrayBuffer>(`${url}/ok`);\n\n    expect(d.status).toStrictEqual(200);\n    expect(d.data && Buffer.from(d.data)).toStrictEqual(Buffer.from(JSON.stringify({ ...successData })));\n  });\n\n  it(`returns response with 'fetchAsBlob'`, async () => {\n    const d = await fetchAsBlob(`${url}/ok`);\n\n    expect(d.status).toStrictEqual(200);\n    expect(d.data?.size).toStrictEqual(16);\n    expect(d.data?.type).toStrictEqual('application/json');\n  });\n\n  // it(`returns response with 'fetchAsBuffer'`, async () => {\n  //   try {\n  //     const d = await fetchAsBuffer(`${url}/ok`);\n\n  //     expect(d.status).toStrictEqual(200);\n  //     expect(d.data).toStrictEqual(Buffer.from(JSON.stringify({ ...successData })));\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // });\n\n  it(`returns response with 'fetchAsJson'`, async () => {\n    const d = await fetchAsJson(`${url}/ok`);\n\n    expect(d.status).toStrictEqual(200);\n    expect(d.data).toStrictEqual({ ...successData });\n  });\n\n  it(`returns response with 'fetchAsText'`, async () => {\n    const d = await fetchAsText(`${url}/ok`);\n\n    expect(d.status).toStrictEqual(200);\n    expect(d.data).toStrictEqual(JSON.stringify({ ...successData }));\n  });\n\n  // it(`returns response with 'fetchAsTextConverted'`, async () => {\n  //   try {\n  //     const d = await fetchAsTextConverted(`${url}/ok`);\n\n  //     expect(d.data).toStrictEqual(JSON.stringify({ ...successData }));\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // });\n\n  // it(`returns response with defined 'info'`, async () => {\n  //   try {\n  //     const d = await fetchAsJson<TestSuccessData>(`${url}/ok`, { timeout: 3e3 });\n\n  //     expect(d).toStrictEqual({\n  //       status: 200,\n  //       info: {\n  //         headers: { 'content-type': 'application/json' },\n  //         size: 0,\n  //         timeout: 3e3,\n  //         type: undefined!,\n  //       },\n\n  //       data: { ...successData },\n  //     } as FetchAsReturnType<TestSuccessData>);\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // });\n});\n\ndescribe('fetch-as::failure', () => {\n  it(`returns failed response with 'fetchAsArrayBuffer'`, async () => {\n    const d = await fetchAsArrayBuffer(`${url}/error`);\n\n    expect(d.status).toBeGreaterThan(399);\n    expect(d.error && Buffer.from(d.error)).toStrictEqual(Buffer.from(JSON.stringify({ ...errorData })));\n  });\n\n  it(`returns failed response with 'fetchAsBlob'`, async () => {\n    const d = await fetchAsBlob(`${url}/error`);\n\n    expect(d.status).toBeGreaterThan(399);\n    expect(d.error?.size).toStrictEqual(42);\n    expect(d.error?.type).toStrictEqual('application/json');\n  });\n\n  // it(`returns failed response with 'fetchAsBuffer'`, async () => {\n  //   try {\n  //     const d = await fetchAsBuffer(`${url}/error`);\n\n  //     expect(d.status).toBeGreaterThan(399);\n  //     expect(d.error).toStrictEqual(Buffer.from(JSON.stringify({ ...errorData })));\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // });\n\n  it(`returns failed response with 'fetchAsJson'`, async () => {\n    const d = await fetchAsJson(`${url}/error`);\n\n    expect(d.status).toBeGreaterThan(399);\n    expect(d.error).toStrictEqual({ ...errorData });\n  });\n\n  it(`returns failed response with 'fetchAsText'`, async () => {\n    const d = await fetchAsText(`${url}/error`);\n\n    expect(d.status).toBeGreaterThan(399);\n    expect(d.error).toStrictEqual(JSON.stringify({ ...errorData }));\n  });\n\n  // it(`returns failed response with 'fetchAsTextConverted`, async () => {\n  //   try {\n  //     const d = await fetchAsTextConverted(`${url}/error`);\n\n  //     expect(d.status).toBeGreaterThan(399);\n  //     expect(d.error).toStrictEqual(JSON.stringify({ ...errorData }));\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // });\n\n  afterAll(() => {\n    nocks.forEach(n => n.persist(false));\n    nock.cleanAll();\n  });\n\n});\n"]}