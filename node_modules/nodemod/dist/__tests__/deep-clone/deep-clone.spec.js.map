{"version":3,"file":"deep-clone.spec.js","sourceRoot":"","sources":["../../../src/__tests__/deep-clone/deep-clone.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepClone } from '../../deep-clone/index.js';\nimport { awno, owno, towno } from './CONSTANTS.js';\n\ntest('deeply clone an nested Object', async () => {\n  const dc = await deepClone(owno);\n\n  expect(dc).toStrictEqual(owno);\n});\n\ntest('truly deep clone an nested Object', async () => {\n  const dc = await deepClone<typeof owno>(owno);\n\n  dc.a.b.c = {} as never;\n  Object.assign(dc, { e: {} });\n\n  expect(dc).not.toStrictEqual(owno);\n});\n\ntest('deeply clone an nested Array', async () => {\n  const dc = await deepClone(awno);\n\n  expect(dc).toStrictEqual(awno);\n});\n\ntest('deeply clone a non-nested Object', async () => {\n  const shallowObj = {\n    a: 'shallow-string',\n    b: [1, 2, 3],\n    c: 999,\n    d: null,\n  };\n  const dc = await deepClone(shallowObj);\n\n  expect(dc).toStrictEqual(shallowObj);\n});\n\ntest('truly deep clone a non-nested Object', async () => {\n  const shallowObj = {\n    a: 'shallow-string',\n    b: [1, 2, 3],\n    c: 999,\n    d: null,\n  };\n  const dc = await deepClone(shallowObj);\n\n  /** Delete properties */\n  Object.assign(dc, {\n    a: undefined,\n    b: undefined,\n    c: undefined,\n    d: undefined,\n  });\n\n  expect(dc).not.toStrictEqual(shallowObj);\n});\n\ntest('deeply clone a non-nested Array', async () => {\n  const shallowArr = [\n    null, 1, 2, { a: 1 }, 'shallow-string',\n  ];\n  const dc = await deepClone(shallowArr);\n\n  expect(dc).toStrictEqual(shallowArr);\n});\n\ntest('deeply clone a non-nested Array', async () => {\n  const shallowArr = [\n    null, 1, 2, { a: 1 }, 'shallow-string',\n  ];\n  const dc = await deepClone(shallowArr);\n\n  expect(dc).toStrictEqual(shallowArr);\n});\n\ntest('truly deep clone a non-nested Array', async () => {\n  const shallowArr: unknown[] = [\n    null, 1, 2, { a: 1 }, 'shallow-string',\n  ];\n  const dc = await deepClone(shallowArr);\n\n  dc[3] = {};\n\n  expect(dc).not.toStrictEqual(shallowArr);\n});\n\ntest('deeply clone a String', async () => {\n  const str = 'just a string';\n  const dc = await deepClone(str);\n\n  expect(str).toStrictEqual(dc);\n});\n\ntest('deeply clone a Number', async () => {\n  const num = 999;\n  const dc = await deepClone(num);\n\n  expect(num).toStrictEqual(dc);\n});\n\ntest('deeply clone a Boolean', async () => {\n  const bo = !0;\n  const dc = await deepClone(bo);\n\n  expect(bo).toStrictEqual(dc);\n});\n\ntest(`deep cloning with 'absolute: true'`, async () => {\n  const dc = await deepClone(towno, { absolute: true });\n\n  expect(dc).toStrictEqual(towno);\n});\n\ntest(`deep cloning with 'absolute: true' before mutating cloned object`, async () => {\n  const dc = await deepClone<typeof towno>(towno, { absolute: true });\n\n  dc.a.b = {} as never;\n\n  expect(dc).not.toStrictEqual(towno);\n});\n"]}