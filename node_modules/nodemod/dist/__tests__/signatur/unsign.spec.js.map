{"version":3,"file":"unsign.spec.js","sourceRoot":"","sources":["../../../src/__tests__/signatur/unsign.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAI9C,MAAM,SAAS,GAAG,6GAA6G,CAAC;AAEhI,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;IACvB,MAAM,CAAC,GAAG,MAAM,MAAM,CAAW,SAAS,EAAE,MAAM,CAAC,CAAC;IAEpD,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;IAEzD,MAAM,UAAU,GAAG,6GAA6G,CAAC;IACjI,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,MAAM,EAAE;QACzC,SAAS,EAAE,GAAG;KACf,CAAC,CAAC;IAEH,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;IAC1C,MAAM,UAAU,GAAG,iEAAiE,CAAC;IACrF,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE3C,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACnC,MAAM,UAAU,GAAG,8DAA8D,CAAC;IAClF,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE3C,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACnC,MAAM,UAAU,GAAG,oEAAoE,CAAC;IACxF,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE3C,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","sourcesContent":["import { unsign } from '../../signatur';\nimport { data, secret } from './CONSTANTS.js';\nimport type { TestData } from './test_typings.js';\n\n// tslint:disable-next-line:max-line-length\nconst signature = 'eyJkYXRhIjp7InNlY3JldEluc2lkZSI6IjEyMyIsInNlY3JldEtleSI6NDU2fX0.WlF_-gDYzfBBPksdvhVvaP_MQ9PWoRiwADbI3MapRg4';\n\nit('returns', async () => {\n  const d = await unsign<TestData>(signature, secret);\n\n  expect(d).toStrictEqual(data);\n});\n\nit(`returns with defined 'options[separator]'`, async () => {\n  // tslint:disable-next-line:max-line-length\n  const signature2 = 'eyJkYXRhIjp7InNlY3JldEluc2lkZSI6IjEyMyIsInNlY3JldEtleSI6NDU2fX0:WlF_-gDYzfBBPksdvhVvaP_MQ9PWoRiwADbI3MapRg4';\n  const d = await unsign(signature2, secret, {\n    separator: ':',\n  });\n\n  expect(d).toStrictEqual(data);\n});\n\nit('returns with number string', async () => {\n  const signature2 = 'eyJkYXRhIjoiMTIzIn0.xOlc5QaiPIH9l1ySgQG-PjAXPCl5TIC3FNcNwH-c7So';\n  const d = await unsign(signature2, secret);\n\n  expect(d).toStrictEqual('123');\n});\n\nit('returns with number', async () => {\n  const signature2 = 'eyJkYXRhIjoxMjN9.zw4SnCZn_aNwaOFed9e21UZfRJlDdnIyvyS9uey7VC4';\n  const d = await unsign(signature2, secret);\n\n  expect(d).toStrictEqual(123);\n});\n\nit('returns with string', async () => {\n  const signature2 = 'eyJkYXRhIjoieyAxMjMifQ.KNvYk83AzkqDuYNDGIpNSJJOM5obtkVk3ctRZM8uL7k';\n  const d = await unsign(signature2, secret);\n\n  expect(d).toStrictEqual('{ 123');\n});\n"]}